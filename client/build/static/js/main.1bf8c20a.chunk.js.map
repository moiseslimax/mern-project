{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/itemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","isOpen","state","react_default","a","createElement","reactstrap_es","color","dark","expand","className","href","onClick","navbar","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","deleteItem","getItems","_this2","items","item","react_transition_group","map","_ref","_id","name","key","timeout","classNames","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","concat","ItemModal","modal","onChange","e","defineProperty","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","for","placeholder","marginTop","block","post","InitialState","loading","combineReducers","arguments","length","undefined","action","objectSpread","filter","toConsumableArray","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","components_AppNavbar","itemModal","components_ShoppingList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bf8c20a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false\r\n        }\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">Lista de compras</NavbarBrand>    \r\n                        <NavbarToggler onClick={this.toggle}></NavbarToggler>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://github.com/moiseslimax\">\r\n                                        Github\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>            \r\n                </Navbar> \r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default AppNavbar;","import axios from 'axios';\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from './types';\r\n\r\nexport const getItems = () => dispatch => {\r\n    dispatch(setItemsLoading());\r\n    axios.get('/api/items')\r\n    .then(res => \r\n        dispatch({\r\n            type: GET_ITEMS,\r\n            payload: res.data\r\n    }))\r\n};\r\n\r\nexport const addItem = (item) => dispatch => {\r\n    axios\r\n        .post('/api/items', item)\r\n            .then(res => \r\n                dispatch({\r\n                    type: ADD_ITEM,\r\n                    payload: res.data\r\n            }))\r\n};\r\n\r\nexport const deleteItem = (id) => dispatch => {\r\n    axios.delete(`/api/items/${id}`).then(res =>\r\n        dispatch({\r\n            type: DELETE_ITEM,\r\n            payload: id\r\n        })\r\n        )\r\n};\r\n\r\n\r\n\r\nexport const setItemsLoading = () => {\r\n    return{\r\n        type: ITEMS_LOADING\r\n    }\r\n}","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD.ITEM';\r\nexport const DELETE_ITEM = 'GET_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';","import React, {Component} from 'react';\r\nimport { ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\nimport PropTypes from 'prop-types'\r\n\r\nclass ShoppingList extends Component {\r\n    componentDidMount() {\r\n        this.props.getItems();\r\n    }\r\n\r\n    onDeleteClick = (id) => {\r\n        this.props.deleteItem(id);\r\n    }\r\n\r\n    render() {\r\n        const{ items } = this.props.item;\r\n        return(\r\n                <ListGroup>\r\n                    <TransitionGroup className=\"shopping-list\">\r\n                    {items.map(({_id, name}) =>(\r\n                        <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                            <ListGroupItem>\r\n                            <Button\r\n                            className=\"remove-btn\"\r\n                            color=\"danger\"\r\n                            size=\"sm\"\r\n                            onClick={this.onDeleteClick.bind(this, _id)}\r\n                            >\r\n                            &times;\r\n                            </Button>\r\n                            {name}\r\n                            </ListGroupItem>\r\n                        </CSSTransition>\r\n                    ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    getItems: PropTypes.func.isRequired,\r\n    item: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    item: state.item\r\n})\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addItem } from '../actions/itemActions';\r\n\r\nclass ItemModal extends Component {\r\n    state = {\r\n        modal: false,\r\n        name: ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        const newItem = {\r\n            name: this.state.name\r\n        }\r\n\r\n        //Add Item via addIteme action\r\n        this.props.addItem(newItem);\r\n\r\n        //Close modal\r\n        this.toggle();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Button color=\"dark\" style={{ marginBottom: '2rem' }} onClick={this.toggle}>Add Item</Button>\r\n\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>Adicione a lista de compras</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Item</Label>\r\n                                <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Item da lista\" onChange={this.onChange}></Input>\r\n                                <Button color=\"dark\" style={{marginTop: '2rem'}} block >Adicionar</Button>                          \r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    item: state.item\r\n})\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from '../actions/types'\r\n\r\nconst InitialState = {\r\n    items: [],\r\n    loading: false\r\n}\r\n\r\nexport default function(state = InitialState, action){\r\n    switch(action.type) {\r\n        case GET_ITEMS:\r\n            return{\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            }\r\n        case DELETE_ITEM:\r\n            return{\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case ITEMS_LOADING:\r\n            return{\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return  state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\n\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n});","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\n\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n    applyMiddleware(...middleware),\r\n    //redux dev tools\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar'\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/itemModal';\nimport { Container } from 'reactstrap';\n//Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n//Css\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar/>\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}